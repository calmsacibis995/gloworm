

68k30 SBC:

	* really need to look up the memory interface...  Some other boards are using GALs for the A1/A0, SIZ1-0, and DTACK1-0 logic
	* the idea for rev1 is to clock it slow and have limited features.  1M Flash, 1M SRAM would be sufficient, but if it's not too much trouble to have more...


Operating System:

	* the return from syscalls is sometimes generating a move %d0, %d1; move %d1, %d0
	* should you increase the number of arguments to 5 (which would still mean the sendto/recvfrom would need to pack the last two args).  There are only 6 or 7 syscalls out
	  of 55 or so that need more than 3 arguments =/

	* the /proc/mounts file is not showing in the directory listing


	* I don't really like the point-of-no-return code in execve().  Is there a way to ensure that wont happen, such as not overwriting the memory segments until the new process is loaded
	* there is still this weird gap between the end of the text segment and the start of the data.rel.ro segment... no idea why.  Getting rid of the initialized data still results in
	  two LOAD segments, but at least they're closer together
	* the gap occurs when certain sections are included, and might be due to the default linker script.  It looks like the .got isn't easily discoverable either, which might be fixable
	  using a custom linker script to make a separate segment for it, but that might also be tricky...

	* need a function to convert a device number into a device name or device file path. (Could add another driver function pointer for getting the name of a devnum)
	* need a function to convert a vnode reference into a path.  (A reverse_lookup funcptr in vnodeops would be fastest (given vnode find and return name) but would require more code.
	  A syscall without special function would pretty much have to open/readdir/close every level up to find it, which could be long, which could be bad to have such a long syscall.
	  Minix and linux and fbsd implement it as a library function, but that would mean a lot of code compiled into any binary that uses it.  But how many would use it?!  (also I kinda
	  need it in the kernel for printing the mountpoints))
	* need to add those to the /proc/mounts file

	* maybe add some parsing of params to the bootloader, rather than using the builtin defaults
	* split the boot loader up into multiple parts, so it can be stage loaded
	* write the bootloader into rom somewhere, such that it can boot from rom or the compact flash (maybe mod eraserom/writerom to take an arg, so you can write to 0x20000)
	* make the boot loader recognize the partition table


	* add a read only mounting mode, such that you know you wont need to sync while also not messing up the CF card
	* make a /dev/flash0 device or /dev/rom0 device in the mem.c driver, possibly even with a partition table and bootloader, that can be mounted read only


	* implement getopt, and add flags to commands
	* add calculating of cpu runtime
	* make use of 68k's supervisor and user mode (you might not have to switch stacks if you do, since it would use a different stack register)
	* add brk/sbrk/stack guard protection.  How do you track memory segment allocation?  Minix iterates over all memory segments and compares...
	* make user programs optionally initialize the heap in a default start routine, and make the heap able to grow (once you have brk/sbrk)
	* the directory size value in the inode isn't working the best.  There is no dir size shrinking yet either
	* add check to vfs_link() for loops

	* make init be a separate file loaded from disk and executed
	* make init relaunch shell if the initial one is killed

	* should you make a lib subdir, and put unistd at the top?
	* move as much inline assembly into a redirectable asm directory: kernel/syscall.h, and interrupts.h/interrupts.c are the last places... interrupt code will need it's own arch dir
	* move the math functions in libc to arch/68k
	* move interrupt and syscall_entry code into proc??



	* use the O_EXCL flag in device drivers to cause an error when more than one thing opens that device
	* how can you make a df command to list how many blocks are free??  That info would need to come from the minix fs-specific code
	* when there's a trailing / to rm or mkdir, it will create something weird
	* add checks for errors in the serial transfer? (I don't think we're handling a frame error or buffer overrun, which could happen if interrupts are turned off for too long)
	* need to set the ctty in the init process somehow (other systems set it as a special case when opening a tty)
	* signals like SIGTTOU are supposed to be sent sometimes instead of returning success or failure
	* do you need to disable triggering of the device-indepedent tty bottom half when the serial device is opened directly?
	* increase timer clock tick to 60Hz from ~14Hz??


	* add network syscalls for local IPC (unix file, sockets)
	* to stdlib, add: fprintf, fscanf, scanf, fopen, fclose, fgetpos, fseek, feof, fread, fwrite
	* add pipe setup to command evaluation
	* add fifos (should be easy now)
	* implement login system (setuid)
	* try porting a simple command, and then something more complex, maybe awk or something as a big target

	* add commands: rmdir, pwd, dd, chown
	* add umask syscall
	* add the & (run in background) option to the shell
	* implement fg/bg somehow... it would be builtin to the shell and would require job control stuff...
	* add up/down arrow processing to the shell (easy without cooked input, but how would it be done with...)
	* add some kind of debugging or tracing support
	* make a PIE format that can be loaded and executed (lower priority now that we have .data.rel.ro relocation working)




	* rewrite the math functions to use fewer registers, and cover the 32 bit divide by 32 bit number case
	* should you refactor the header files in minixfs implementation into actual c files, with a common header to declare the functions?
	* implement symlinks in minixfs
	* implement links for mallocfs
	* minixfs, implement versions 2 and 3

	* should there be a lighter weight task type, instead of processes, so that you can service interrupt processing without a bunch of wasted memory
	* should there be something that periodically syncs data to disk?
	* there is an issue running the shell on linux related to the setting the process group
	* do you need to add variable sized buffers/blocks into bufcache? (yes)
	* can you change the fd allocator, such that calling it twice will return 2 different fds, even though they aren't reserved until set
	  (ie. store the last allocated fd, but it has to be in the process struct)
	* should there be a vnode op to fill in the statbuf struct, or should they be in the vnode?  The 3 values not in the vnode (ino, blksize, blocks)
	* the context switch at the start of an interrupt takes at least 70us.  It is more or less required if we might reschedule a process on exit, which is necessary for the timer
	  interrupt, but if we had the timer and serial on different interrupts (different hardware), we could make the serial ints fast-ints, only saving the 4 scratch registers
	  It *might* be possible to defer the context save until you're certain a reschedule is needed just before exiting, but it would require being very careful during the stack swap


	* remove the execbuiltin syscall, which is temporary until all commands can be executable files


	* could you use the queue node to add procs to a free list, instead of iterating over all the procs when creating a new one
	* look for any bugs that might be caused by a function returning the same vnode as was passed in
	* re-evaluate file permissions checks to make sure they're correct according to posix
	* you need some tests, but ideally it would use a simple emulator.  Maybe easy68k or something could be used

	* as a note about terminology for pseudoterminals, pts/ptm (slave/master);  it would make more sense for them to be named process-end and device-end, which implies
	  the expected interface to each.   A user process will open the process-end terminal device and communicate with it like any tty.  The emulator or whatever would
	  connect to the other end and act as if it were a terminal device, in place of what would be an actual I/O device like RS-232 or a hardwired keyboard.  I guess the
	  abbreviations might be /dev/ptpX and /dev/ptdX?


Monitor:

	* failure vectors don't point to the correct addresses, from the looks of it

	* can you have an debugger in the monitor software?  There are trap and breakpoint instructions in the processor for debugging, so if you define an interrupt handler
	  for those, you could have it enter a debugger, that possibly allows single stepping?  I'm not sure how to implement that


68k Single Board Computer:

	* the serial issue turns out to be a problem with the crystal for the serial chip.  It is outputting an inconsistent signal around 100kHz when powered through
	  USB or power supply.  When powered by the arduino, you have to unplug and replug the serial usb cable to make it work, which seems to reset the oscillator.
	  Connecting a 22pF capacitor across the crystal jumpstarts it, but the output is a lot lower on the scope with it connected.  The datasheet says to use 15 and 5pF
	  which is pretty low, and I don't have caps that small.  I have to play with it more, but this seems to be a cap issue more than anything


	* can you add a video/lcd expansion via the expansion connector?  Maybe you could get ends to directly connect it?  Would it be via parallel interface?
	  would you need a PIT 68230 to interface?  How complex are the interfaces of those graphic ones?
	* can you connect an esp01 as a wifi device?  I suppose you could connect it to the other serial port, even though it would be slow


68k Arduino Shield:
	(nothing atm)


68k SMT:
	(nothing atm)


* should you move the Z80 project into it's own repo?

