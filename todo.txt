
Software/OS:

	* add a vfs_create function, as well as a syscall for it
	* add mounting of filesystems, and root node stuff, so you can remove the special case in vfs.c

	* implement generic cache and use it in blockcache and minixfs


	* move as much inline assembly, from headers especially, into a redirectable asm directory

	* after sending the hello program and exec'ing it, it returns 1 when it should return 0

	* change the blocking/waiting code to use either of the state enums for blocking or waiting, rather than checking that the syscall is wait or waitpid
	* can you change the fd allocator, such that calling it twice will return 2 different fds, even though they aren't reserved until set
	  (ie. store the last allocated fd, but it has to be in the process struct)
	* what is needed to implement a 'ps' command in userspace? pstat()


	* a page allocator, to replace the use of malloc for allocating the program space
	* once you have mallocfs able to allocate multiple blocks with a block table stored in the vnode/in allocated blocks, and you have a block allocator algorithm for page
	  allocation, you should be able to implement a minixfs minimally using a mocked interface to a block cache and block driver
	* make a block driver interface
	* make a block cache/buf cache (read the unix design book for more info)

	* should you make a lib subdir, and put unistd at the top?

	* syscalls to implement: kill, signals, getpid, mount/umount, rename, dup, chdir, chmod, chown, access, getuid/setuid, alarm, pause, time
	* add O_TRUNC
	* add file permissions checks, and uid checks
	* add current working directory info.  Is that stored in the process?  Do you have to do string concat or can you pass 2 arguments to the vfs entry funcs



	* add brk/sbrk/stack guard protection
	* move the queue and circular buffer code to common include files somewhere (src/utils/? src/shared/?)
	* a slab allocator would maybe help, but I don't think it's as important at the moment

	* there is an issue with load scripts that are an odd number of bytes, and the last byte wont be read/written because the loader operates on words
	* can you make the kernel relocatable again?
	* rewrite the math functions to use fewer registers (this ain't a risc processor)
	* you need some tests, but ideally it would use a simple emulator.  Maybe easy68k or something could be used

	* can you have an debugger in the monitor software?  There are trap and breakpoint instructions in the processor for debugging, so if you define an interrupt handler
	  for those, you could have it enter a debugger, that possibly allows single stepping?  I'm not sure how to implement that


68k Single Board Computer:

	* fix the heatsink
	* maybe extra power pins?
	* need labels next to all pins


	* the serial issue turns out to be a problem with the crystal for the serial chip.  It is outputting an inconsistent signal around 100kHz when powered through
	  USB or power supply.  When powered by the arduino, you have to unplug and replug the serial usb cable to make it work, which seems to reset the oscillator.
	  Connecting a 22pF capacitor across the crystal jumpstarts it, but the output is a lot lower on the scope with it connected.  The datasheet says to use 15 and 5pF
	  which is pretty low, and I don't have caps that small.  I have to play with it more, but this seems to be a cap issue more than anything


	* can you add a video/lcd expansion via the expansion connector?  Maybe you could get ends to directly connect it?  Would it be via parallel interface?
	  would you need a PIT 68230 to interface?  How complex are the interfaces of those graphic ones?
	* can you connect an esp01 as a wifi device?  I suppose you could connect it to the other serial port, even though it would be slow

68k Arduino Shield:
	* maybe extra power pins?



* it might be possible to do a 68030 single board computer, with 74LVC244/245 interfaces to an fpga chip, to provide the glue logic, but it would be a
  lot of surface mount chips, so you'd have to try a few smaller surface mount projects first
* make a surface mount/PLCC version of the 68k-SBC board to test SMT, since the design should work, and some of the memory chips are available as SMT

